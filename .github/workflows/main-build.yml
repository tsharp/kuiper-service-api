name: Build & Test

on:
  workflow_dispatch:
  
  schedule:
    - cron: '30 6 * * *'
  push:
    branches: [ "main", "develop", "next", "next-major" ]
  pull_request:
    branches: [ "main", "develop" ]

env:
  DOTNET_VERSION: 8.0.205

jobs:

  version:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v1.1.1
      with:
        versionSpec: '5.x'

    - name: Version
      id: version_step
      uses: gittools/actions/gitversion/execute@v1.1.1
      with:
        useConfigFile: true

    - run: |
        echo "FullSemVer (env.fullSemVer)            : ${{ env.fullSemVer }}"
      name: Display GitVersion variables (without prefix)

    - run: |
        echo "FullSemVer (env.GitVersion_FullSemVer) : ${{ env.GitVersion_FullSemVer }}"
      name: Display GitVersion variables (with prefix)

    - run: |
        echo "FullSemVer (steps.version_step.outputs.fullSemVer)            : ${{ steps.version_step.outputs.fullSemVer }}"
      name: Display GitVersion outputs (step output without prefix)

    - run: |
        echo "FullSemVer (steps.version_step.outputs.GitVersion_FullSemVer) : ${{ steps.version_step.outputs.GitVersion_FullSemVer }}"
      name: Display GitVersion outputs (step output with prefix)

    - run: |
        echo "FullSemVer (env.myvar_fullSemVer)            : ${{ env.myvar_fullSemVer }}"
      name: Display mapped local env (outputs without prefix)
      env:
        myvar_fullSemVer: ${{ steps.version_step.outputs.fullSemVer }}

    - run: |
        echo "FullSemVer (env.myvar_GitVersion_FullSemVer) : ${{ env.myvar_GitVersion_FullSemVer }}"
      name: Display mapped local env (outputs with prefix)
      env:
        myvar_GitVersion_FullSemVer: ${{ steps.version_step.outputs.GitVersion_FullSemVer }}

    - run: |
        echo "FullSemVer (env.myvar_fullSemVer)            : $env:myvar_fullSemVer"
      name: Display mapped local env (pwsh - outputs without prefix)
      shell: pwsh
      env:
        myvar_fullSemVer: ${{ steps.version_step.outputs.fullSemVer }}

    - run: |
        echo "FullSemVer (env.myvar_GitVersion_FullSemVer) : $env:myvar_GitVersion_FullSemVer"
      name: Display mapped local env (pwsh - outputs with prefix)
      shell: pwsh
      env:
        myvar_GitVersion_FullSemVer: ${{ steps.version_step.outputs.GitVersion_FullSemVer }}

    - run: |
        echo "FullSemVer (myvar_fullSemVer)            : $myvar_fullSemVer"
      name: Display mapped local env (bash - outputs without prefix)
      shell: bash
      env:
        myvar_fullSemVer: ${{ steps.version_step.outputs.fullSemVer }}

    - run: |
        echo "FullSemVer (myvar_GitVersion_FullSemVer) : $myvar_GitVersion_FullSemVer"
      name: Display mapped local env (bash - outputs with prefix)
      shell: bash
      env:
        myvar_GitVersion_FullSemVer: ${{ steps.version_step.outputs.GitVersion_FullSemVer }}

    # - name: Version
    #   uses: huggingface/semver-release-action@latest
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    needs: version
#    strategy:
#      matrix:
#        configuration: [Debug, Release]

    runs-on: ubuntu-latest   # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on      
    steps:
    # - name: Extract Version Tag
    #   run: |
    #     version=${GITHUB_REF#refs/tags/v}
    #     echo "VERSION=$version" >> $GITHUB_ENV

    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore Packages
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore --configuration Release

    # Execute all unit tests in the solution
    - name: Execute unit tests
      run: dotnet test --no-restore --configuration Release

    - uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.ACR_LOGIN_SERVER }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Build and push Docker image (Dev)
      if: github.ref != 'refs/heads/main'
      uses: docker/build-push-action@v4
      with:
        context: src/Kuiper.Clustering.ServiceApi
        push: true
        tags: |
          ${{ secrets.ACR_LOGIN_SERVER }}/kuiper-service-api:${{ env.fullSemVer }}

    - name: Build and push Docker image (Main)
      if: github.ref == 'refs/heads/main'
      uses: docker/build-push-action@v4
      with:
        context: src/Kuiper.Clustering.ServiceApi
        push: true
        tags: |
          ${{ secrets.ACR_LOGIN_SERVER }}/kuiper-service-api:latest
          ${{ secrets.ACR_LOGIN_SERVER }}/kuiper-service-api:${{ env.fullSemVer }}